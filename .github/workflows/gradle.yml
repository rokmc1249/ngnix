name: Java CI with Gradle
on:
  release:
    types: [push] # push를 하면 자동으로 실행
  push:
    branches: [master]

env:

  S3_BUCKET_NAME: codesucket
  PROJECT_NAME: Galle
  CODE_DEPLOY_APP_NAME: cicd-test-CD
  CODE_DEPLOY_GROUP_NAME: cicd-test-CD-group

permissions:
  contents: read

jobs:
  build:
   runs-on: ubuntu-latest # 스크립트를 작동할 OS
   steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              ${{ runner.os }}-gradle-

      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{secrets.APPLICATION}}" > ./src/main/resources/application.properties
      - run: cat ./src/main/resources/application.properties

      # ./gradlw 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 프로젝트 build
      - name: Build with Gradle
        run: ./gradlew bootjar


      # 실제 필요한 파일만 압축
      - name: Generate deployment package
        run: |
          mkdir deploy
          cp ./docker/docker-compose.blue.yml ./deploy/
          cp ./docker/docker-compose.green.yml ./deploy/
          cp ./docker/Dockerfile ./deploy/
          cp scripts/*.sh ./deploy/
          cp appspec.yml ./deploy/
          cp build/libs/*.jar ./deploy/
          zip -r -qq -j ./$PROJECT_NAME.zip ./deploy/
        

      # AWS 권한 확인
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      # 압축한 프로젝트를 S3로 전송
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./deploy/$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME.zip
      # 배포 그룹으로 애플리케이션 전송
      - name: Code Deploy
        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME 
             --deployment-config-name CodeDeployDefault.AllAtOnce 
             --deployment-group-name $CODE_DEPLOY_GROUP_NAME 
             --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME.zip